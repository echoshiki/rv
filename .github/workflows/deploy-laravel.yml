name: Deploy Laravel to Production

on:
  push:
    branches:
      - develop
    paths:
      - 'laravel/**'  # 只在laravel目录有更改时触发

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # 1. 设置PHP (GitHub Actions环境)
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'  # 使用与您项目兼容的PHP版本
          extensions: mbstring, dom, fileinfo, curl
          coverage: none
      
      # 2. 缓存Composer依赖
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        working-directory: ./laravel
      
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('laravel/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      
      # 3. 安装Composer依赖 (GitHub Actions环境)
      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist
        working-directory: ./laravel
      
      # 4. 设置Node.js (GitHub Actions环境)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'laravel/package-lock.json'
      
      # 5. 安装NPM依赖 (GitHub Actions环境)
      - name: Install Node dependencies
        run: npm ci
        working-directory: ./laravel
      
      # 6. 构建前端资源 (GitHub Actions环境)
      - name: Build frontend assets
        run: npm run build
        working-directory: ./laravel
      
      # 7. 设置SSH连接
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
 
      # 9. 同步代码和构建好的前端资产
      - name: Sync Laravel directory to server
        run: |
          rsync -avz --delete \
            --exclude='.env' \
            --exclude='storage/app/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            --exclude='storage/logs/*' \
            --exclude='bootstrap/cache/*' \
            --exclude='node_modules/' \
            --exclude='vendor/' \
            --include='storage/origin/**' \
            --include='public/build/**' \
            -e "ssh -p ${{ secrets.SERVER_PORT }}" \
            ./laravel/ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_PATH }}/
      
      # 10. 检查并创建.env文件（如果不存在）
      - name: Create .env file if not exists
        run: |
          ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
            if [ ! -f ${{ secrets.DEPLOY_PATH }}/.env ]; then
              echo '创建.env文件...'
              cp ${{ secrets.DEPLOY_PATH }}/.env.example ${{ secrets.DEPLOY_PATH }}/.env
              echo '.env文件已创建，请手动配置数据库连接信息！'
            else
              echo '.env文件已存在，跳过创建'
            fi
          "
      
      # 11. 在服务器上安装Composer依赖并执行部署命令
      - name: Run Laravel deployment commands
        run: |
          ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
            # 进入项目目录
            cd ${{ secrets.DEPLOY_PATH }}
            
            # 安装Composer依赖 (服务器环境)
            echo '安装Composer依赖...'
            composer install --no-interaction --prefer-dist --optimize-autoloader
            
            # 生成APP_KEY
            php artisan key:generate
            
            # 创建storage软链接
            if [ ! -L 'public/storage' ]; then
              echo '创建storage软链接...'
              php artisan storage:link
            fi
            
            # 确保权限正确
            echo '设置权限...'
            find . -type f -exec chmod 644 {} \;
            find . -type d -exec chmod 755 {} \;
            chmod -R 775 storage bootstrap/cache
            
            # 设置所有者为www用户
            echo '设置文件所有者...'
            chown -R www:www .
            
            echo '部署完成：'$(date)
          "
